# 路径总合

给你二叉树的根节点 `root` 和一个表示目标和的整数 `targetSum` 。判断该树中是否存在 **根节点到叶子节点** 的路径，这条路径上所有节点值相加等于目标和 `targetSum` 。如果存在，返回 `true` ；否则，返回 `false` 。

**叶子节点** 是指没有子节点的节点。

[112. 路径总和 - 力扣（LeetCode）](https://leetcode.cn/problems/path-sum/description/)

```c++
class Solution {
public:
    int onPath = 0;
    bool isFound = false;
    void traverse(TreeNode* root, int targetSum){
        if (root == nullptr) return;
        
        onPath += root->val;
        if (root->left == nullptr && root->right == nullptr){
            if (onPath == targetSum) isFound = true;

            onPath -= root->val;
            return;
        }

      	// 有负值，不能这样剪枝
        /*if (onPath >= targetSum){// 当前不是叶子结点并且sum已经大于或等于目标值
            onPath -= root->val;
            return;
        }*/
        
        traverse(root->left, targetSum);
        traverse(root->right, targetSum);
        onPath -= root->val;
        return;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        traverse(root,targetSum);
        return isFound;
    }
};
```

```c#
public class Solution {
    public int onPath = 0;
    public bool isFound = false;
    public void Traverse(TreeNode root, int targetSum){
        if (root == null) return;

        onPath += root.val;
        if (root.left == null && root.right == null){
            if (onPath == targetSum) isFound = true;

            onPath -= root.val;
            return;
        }

        Traverse(root.left, targetSum);
        Traverse(root.right, targetSum);
        onPath -= root.val;
        return;
    }
    public bool HasPathSum(TreeNode root, int targetSum) {
        Traverse(root,targetSum);
        return isFound;
    }
};
```

